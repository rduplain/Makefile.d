#!/usr/bin/env bash
# Generate SHA256 of a git ref, defaulting to current git HEAD.
#
# See README caveats of GitHub's tarball SHA256.

# Exit immediately if a command error or non-zero return occurs.
set -e

# The name of this executable program.
PROG="$( basename "${BASH_SOURCE[0]}" )"

usage() {
    # Print program usage to stderr and return 2.

    exec >&2 # Redirect all further stdout to stderr.

    if [ $# -gt 0 ]; then
        # Print message argument, if given.
        echo "$@"
        echo
    fi

    echo "usage: $PROG [OPTION...] [REF]"
    echo
    echo "REF is an optional git reference (default: HEAD)."
    echo
    echo "options:"
    echo
    echo "  --qwerty                   Output a qwerty.sh command."
    return 2
}

given() {
    # Check that the given commands exist.

    local error=''

    for command in "$@"; do
        if ! which "$command" > /dev/null; then
            echo "$PROG requires '$command' command, but cannot find it." >&2
            error=true
        fi
    done

    if [ -n "$error" ]; then
        return 3
    fi
}

dirty() {
    # Check if git repository is dirty, return zero if dirty.
    #
    # Here, dirty means one or both of:
    #
    # * the git index is not empty (compared to HEAD)
    # * the working tree has changes (compared to HEAD)

    if git diff-index --quiet --cached HEAD && git diff-files --quiet; then
        return 1
    fi

    return 0

}

warn_if_dirty_head() {
    # Warn to stderr if target ref is HEAD and working tree is dirty.

    if [ $# -ne 1 ]; then
        echo "usage: warn_if_dirty REF" >&2
        return 2
    fi

    local target_ref=$1
    shift

    if [ "$target_ref" = "HEAD" ] && dirty; then
        echo 'warning: git repository is dirty.'                            >&2
        echo                                                                >&2
        echo '`git archive` will not include any uncommitted changes.'      >&2
        echo                                                                >&2
        echo                                                                >&2
    fi
}

github_detail() {
    # Parse key GitHub details from git config.

    if [ $# -ne 1 ]; then
        echo "usage: github_detail REF" >&2
        return 2
    fi

    local ref="$1"
    shift

    local url=${GIT_REMOTE_URL:-"$(git remote get-url origin)"}

    if [ -z "$url" ] || [ "${url//github/}" = "${url}" ]; then
        echo "Remote 'origin' is not GitHub: $url" >&2
        return 1
    fi

    local user=$(echo "${url}" | awk -F '[/:]' '{ print $(NF-1) }')
    local project_git=$(echo "${url}" | awk -F '[/:]' '{ print $NF }')
    local project=${project_git%%.git}
    local tarball="https://github.com/$user/$project/tarball/$ref"

    echo "GITHUB_USER=$user"
    echo "GITHUB_PROJECT=$project"
    echo "GITHUB_TARBALL=$tarball"
}

generate_sha256() {
    # Generate SHA256 checksum of git archive, for given ref.

    if [ $# -ne 1 ]; then
        echo "usage: generate_sha256 REF" >&2
        return 2
    fi

    local ref="$1"
    shift

    # Ensure short ref.
    ref=$(git rev-parse --short "$ref")

    eval "$(github_detail "$ref")"

    # Again... See README caveats of GitHub's tarball SHA256.
    local prefix="${GITHUB_USER}-${GITHUB_PROJECT}-${ref}/"
    git archive \
        --prefix="$prefix" \
        --format=tar.gz -6 "$ref" |\
            openssl dgst -sha256 |\
                awk '{ print $2 }'
}

generate_sha256_values() {
    # Generate shell eval-able output of checksum.

    if [ $# -ne 1 ]; then
        echo "usage: generate_sha256_values REF" >&2
        return 2
    fi

    local ref="$1"
    shift

    eval "$(github_detail "$ref")"

    echo "GITHUB_REF=$ref"
    echo -n "GITHUB_SHA256="
    generate_sha256 "$ref"
    echo "GITHUB_TARBALL=$GITHUB_TARBALL"
}

generate_qwerty_command() {
    # Generate a qwerty.sh command line.

    if [ $# -ne 1 ]; then
        echo "usage: generate_qwerty_command REF" >&2
        return 2
    fi

    local ref="$1"
    shift

    eval "$(generate_sha256_values "$ref")"

    cat -<<EOF
curl -sSL qwerty.sh |\\
    sh -s - \\
    --sha256=${GITHUB_SHA256} \\
    ${GITHUB_TARBALL}
EOF
}

main() {
    # Main.

    given awk git openssl

    local target_ref qwerty

    while [ "$1" != "" ]; do
        if case $1 in "-"*) true;; *) false;; esac; then
            # Argument starts with a hyphen.
            case "$1" in
                -h | --help)
                    usage
                    ;;
                --qwerty)
                    qwerty=true
                    ;;
                *)
                    usage "$PROG: unknown option '$1'"
                    ;;
            esac
        else
            # Argument does NOT start with a hyphen.
            if [ -n "$target_ref" ]; then
                usage
            else
                target_ref="$1"
            fi
        fi
        shift
    done

    if [ -z "$target_ref" ]; then
        target_ref=HEAD
    fi

    warn_if_dirty_head "$target_ref"

    ref=$(git rev-parse --short "$target_ref")

    if [ -z "$qwerty" ]; then
        generate_sha256_values "$ref"
    else
        generate_qwerty_command "$ref"
    fi
}

main "$@"
