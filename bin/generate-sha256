#!/usr/bin/env bash
# Generate SHA256 of a git ref, defaulting to current git HEAD.
#
# See README caveats of GitHub's tarball SHA256.

# Exit immediately if a command error or non-zero return occurs.
set -e

# The name of this executable program.
PROG="$( basename "${BASH_SOURCE[0]}" )"

usage() {
    # Print program usage to stderr and return 2.

    exec >&2 # Redirect all further stdout to stderr.

    if [ $# -gt 0 ]; then
        # Print message argument, if given.
        echo "$@"
        echo
    fi

    echo "usage: $PROG [OPTION...] [REF]"
    echo
    echo "REF is an optional git reference (default: HEAD)."
    echo "Do not provide REF when using --release."
    echo
    echo "options:"
    echo
    echo "  --qwerty                   Output a qwerty.sh command."
    echo "  --release                  Use the latest tag instead of REF."
    return 2
}

given() {
    # Check that the given commands exist.

    local error=''

    for command in "$@"; do
        if ! which "$command" > /dev/null; then
            echo "$PROG requires '$command' command, but cannot find it." >&2
            error=true
        fi
    done

    if [ -n "$error" ]; then
        return 3
    fi
}

dirty() {
    # Check if git repository is dirty, return zero if dirty.
    #
    # Here, dirty means one or both of:
    #
    # * the git index is not empty (compared to HEAD)
    # * the working tree has changes (compared to HEAD)

    if git diff-index --quiet --cached HEAD && git diff-files --quiet; then
        return 1
    fi

    return 0

}

warn_if_dirty_head() {
    # Warn to stderr if ref is HEAD and working tree is dirty.

    if [ $# -ne 1 ]; then
        echo "usage: warn_if_dirty REF" >&2
        return 2
    fi

    local ref=$1
    shift

    if [ "$ref" = "HEAD" ] && dirty; then
        echo 'warning: git repository is dirty.'                            >&2
        echo                                                                >&2
        echo '`git archive` will not include any uncommitted changes.'      >&2
        echo                                                                >&2
        echo                                                                >&2
    fi
}

ref_exists() {
    # Check that the ref exists.

    if [ $# -ne 1 ]; then
        echo "usage: ref_exists REF" >&2
        return 2
    fi

    git rev-parse --short "$1" > /dev/null 2>&1
}

find_latest_git_tag() {
    # Find the latest git tag, for the current branch.

    git describe --tags --abbrev=0
}

is_git_tag() {
    # Determine whether the given ref is a git tag.

    git rev-parse -q --verify "refs/tags/$1" > /dev/null 2>&1
}

git_detail() {
    # Parse given ref & key repo details from git config.

    if [ $# -ne 1 ]; then
        echo "usage: git_detail REF" >&2
        return 2
    fi

    local ref="$1"
    shift

    # If ref is a valid tag, keep it as is. Else, use a canonical ref.
    if ! is_git_tag "$ref"; then
        ref=$(git rev-parse --short "$ref" 2>/dev/null)
    fi

    local short_ref=$(git rev-parse --short "$ref" 2>/dev/null)
    local url=${GIT_REMOTE_URL:-"$(git remote get-url origin)"}

    if [ -z "$url" ] || [ "${url//github/}" = "${url}" ]; then
        echo "Remote 'origin' is not GitHub: $url" >&2
        return 1
    fi

    local user=$(echo "${url}" | awk -F '[/:]' '{ print $(NF-1) }')
    local project_git=$(echo "${url}" | awk -F '[/:]' '{ print $NF }')
    local project=${project_git%%.git}
    local tarball="https://github.com/$user/$project/tarball/$ref"

    echo "REF=$ref"
    echo "SHORT_REF=$short_ref"
    echo "REPO_USER=$user"
    echo "REPO_PROJECT=$project"
    echo "REPO_TARBALL=$tarball"
}

generate_sha256() {
    # Generate SHA256 checksum of git archive, for given ref.

    if [ $# -ne 1 ]; then
        echo "usage: generate_sha256 REF" >&2
        return 2
    fi

    eval "$(git_detail "$1")"

    # Again... See README caveats of GitHub's tarball SHA256.
    local prefix="${REPO_USER}-${REPO_PROJECT}-${SHORT_REF}/"
    git archive \
        --prefix="$prefix" \
        --format=tar.gz -6 "$REF" |\
            openssl dgst -sha256 |\
                awk '{ print $2 }'
}

generate_sha256_values() {
    # Generate shell eval-able output of checksum.

    if [ $# -ne 1 ]; then
        echo "usage: generate_sha256_values REF" >&2
        return 2
    fi

    eval "$(git_detail "$1")"

    echo "REPO_REF=$REF"
    echo -n "REPO_SHA256="
    generate_sha256 "$REF"
    echo "REPO_TARBALL=$REPO_TARBALL"
}

generate_qwerty_command() {
    # Generate a qwerty.sh command line.

    if [ $# -ne 1 ]; then
        echo "usage: generate_qwerty_command REF" >&2
        return 2
    fi

    eval "$(generate_sha256_values "$1")"

    echo "curl -sSL qwerty.sh |\\"
    echo "    sh -s - \\"
    echo "    --sha256=${REPO_SHA256} \\"

    if [ -n "$QWERTY_FLAGS" ]; then
        echo "    $QWERTY_FLAGS \\"
    fi

    echo "    ${REPO_TARBALL}"
}

main() {
    # Main.

    given awk git openssl

    local ref checksum qwerty release

    while [ "$1" != "" ]; do
        if case $1 in "-"*) true;; *) false;; esac; then
            # Argument starts with a hyphen.
            case "$1" in
                -h | --help)
                    usage
                    ;;
                --checksum)
                    checksum=true
                    ;;
                --qwerty)
                    qwerty=true
                    ;;
                --release)
                    release=true
                    ;;
                --source)
                    # Support sourcing this file in order to access functions:
                    #
                    #     . path/to/this/file --source
                    #
                    # Note that `set -e` has already been set.
                    return 0
                    ;;
                *)
                    usage "$PROG: unknown option '$1'"
                    ;;
            esac
        else
            # Argument does NOT start with a hyphen.
            if [ -n "$ref" ] || [ -n "$release" ]; then
                usage
            else
                ref="$1"
            fi
        fi
        shift
    done

    if [ -z "$ref" ]; then
        if [ -n "$release" ]; then
            ref="$(find_latest_git_tag)"
        else
            ref=HEAD
        fi
    fi

    if ! ref_exists "$ref"; then
        usage "error: ref is invalid: $ref"
    fi

    warn_if_dirty_head "$ref"

    if [ -n "$checksum" ]; then
        generate_sha256 "$ref"
    elif [ -n "$qwerty" ]; then
        generate_qwerty_command "$ref"
    else
        generate_sha256_values "$ref"
    fi
}

main "$@"
